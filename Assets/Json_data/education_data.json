{
"oop": {
	"title": "[font_size=25][center][b]More Information[/b][/center][/font_size]\t\t [font_size=30][center][b]Object Oriented Programming[/b][/center][/font_size]\n\n",
	"text": 
		
	 "[b]Object-Oriented Programming (OOP)[/b] is a programming paradigm where everything is treated as an object with properties (data) and behaviors (methods). In [i]Re:Compiled[/i], the enemies, platforms, and NPCs are all objects, each built from blueprints called classes.\n
	  [b]Classes and Objects[/b]: A [b]class[/b] is like a blueprint, and an [b]object[/b] is an instance of that blueprint. For example, all viruses in the game are based on an [b]Enemy[/b] class, but each has unique properties like speed or attack type.\n
	  [b]Inheritance[/b]: Some objects share traits. Instead of rewriting code, a subclass inherits from a parent class. A [b]FirewallEnemy[/b] might inherit from [b]Enemy[/b] but have extra defenses.\n
	  [b]Polymorphism[/b]: Different objects can respond differently to the same action. If the player uses [b]Absorb()[/b] on an enemy, the effect depends on the type of enemy absorbed.\n
	  [b]Encapsulation[/b]: Objects hide internal details, exposing only what’s necessary. You can’t modify an enemy’s health directly, but you can reduce it with an attack.\n
	  [b]Abstraction[/b]: Complex systems are simplified. When the player jumps on a platform, the underlying physics are hidden—only the outcome matters.\n
	  In this digital world, understanding OOP is key. Every interaction follows these principles, and mastering them is the only way to escape the simulation.",
	
	"questions": [
		{
			"question": "[b]In OOP, what is a class?[/b]",
			"answers": [
				"A blueprint for creating objects",
				"A single instance of an object",
				"A function inside an object",
				"A type of enemy in [i]Re:Compiled[/i]"
			],
			"correct_answer": 0
		},
		{
			"question": "[b]How does inheritance work in OOP?[/b]",
			"answers": [
				"One object copies another's behavior without modification",
				"A class can inherit properties and methods from another class",
				"An object takes control of another object",
				"NPCs in [i]Re:Compiled[/i] become unkillable"
			],
			"correct_answer": 1
		},
		{
			"question": "[b]In [i]Re:Compiled[/i], enemies, platforms, and NPCs all share some common properties. What OOP concept does this represent?[/b]",
			"answers": [
				"Polymorphism",
				"Encapsulation",
				"Inheritance",
				"Debugging"
			],
			"correct_answer": 2
		},
		{
			"question": "[b]What is polymorphism in OOP?[/b]",
			"answers": [
				"When different objects share the same method but behave differently",
				"When an object hides its internal data",
				"When an object can only be used once",
				"When the AI in [i]Re:Compiled[/i] changes its dialogue"
			],
			"correct_answer": 0
		},
		{
			"question": "[b]Why is encapsulation important in OOP?[/b]",
			"answers": [
				"It allows objects to inherit behavior",
				"It protects an object's data and controls access to it",
				"It forces all objects to act the same way",
				"It makes debugging impossible"
			],
			"correct_answer": 1
		}
	]
}
}
